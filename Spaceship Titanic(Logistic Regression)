{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":34377,"databundleVersionId":3220602,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## In progress \n\n# 1. Introduction \nIn this notebook I plan to use simple logistic regression to predict who was transported to another dimension in Titanic Spaceship Competition. \n\n# 2. EDA ","metadata":{}},{"cell_type":"code","source":"# packages import \nimport pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns ","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:02:29.961997Z","iopub.execute_input":"2024-05-20T13:02:29.962697Z","iopub.status.idle":"2024-05-20T13:02:32.531939Z","shell.execute_reply.started":"2024-05-20T13:02:29.962665Z","shell.execute_reply":"2024-05-20T13:02:32.530756Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# data import \ntrain_data = pd.read_csv('/kaggle/input/spaceship-titanic/train.csv')\ntest_data = pd.read_csv('/kaggle/input/spaceship-titanic/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:02:32.533988Z","iopub.execute_input":"2024-05-20T13:02:32.534854Z","iopub.status.idle":"2024-05-20T13:02:32.6232Z","shell.execute_reply.started":"2024-05-20T13:02:32.53482Z","shell.execute_reply":"2024-05-20T13:02:32.622165Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# first look into dataset \ntrain_data.head() ","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:02:32.624303Z","iopub.execute_input":"2024-05-20T13:02:32.624619Z","iopub.status.idle":"2024-05-20T13:02:32.661198Z","shell.execute_reply.started":"2024-05-20T13:02:32.624593Z","shell.execute_reply":"2024-05-20T13:02:32.660185Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:02:32.663444Z","iopub.execute_input":"2024-05-20T13:02:32.663878Z","iopub.status.idle":"2024-05-20T13:02:32.698096Z","shell.execute_reply.started":"2024-05-20T13:02:32.66385Z","shell.execute_reply":"2024-05-20T13:02:32.697294Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.shape","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:02:32.699385Z","iopub.execute_input":"2024-05-20T13:02:32.699707Z","iopub.status.idle":"2024-05-20T13:02:32.705695Z","shell.execute_reply.started":"2024-05-20T13:02:32.69968Z","shell.execute_reply":"2024-05-20T13:02:32.704736Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.nunique()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:02:32.706903Z","iopub.execute_input":"2024-05-20T13:02:32.707207Z","iopub.status.idle":"2024-05-20T13:02:32.733849Z","shell.execute_reply.started":"2024-05-20T13:02:32.707174Z","shell.execute_reply":"2024-05-20T13:02:32.732556Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"So we can see that: \n- there are relatively few missing values\n- we have 8693 records and 14 variables\n- we have 5 categorical data  ","metadata":{}},{"cell_type":"code","source":"# Visualization of missng data \n\nx = []\ny = []\nfor column in train_data.columns:\n    x.append(column)\n    y.append(train_data[column].count()/train_data.shape[0])\n\nplt.figure(figsize=(15,5))\nplt.title('Percentage of available data')\nplt.xticks(rotation=45) \nplt.bar(x,y)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:02:32.73504Z","iopub.execute_input":"2024-05-20T13:02:32.735934Z","iopub.status.idle":"2024-05-20T13:02:33.170222Z","shell.execute_reply.started":"2024-05-20T13:02:32.7359Z","shell.execute_reply":"2024-05-20T13:02:33.169094Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:02:33.171599Z","iopub.execute_input":"2024-05-20T13:02:33.172714Z","iopub.status.idle":"2024-05-20T13:02:33.193985Z","shell.execute_reply.started":"2024-05-20T13:02:33.172675Z","shell.execute_reply":"2024-05-20T13:02:33.192639Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# lists of columns with numerical and categorical values for further analysis \n\nnumCol = ['Age', 'RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']\ncatCol = ['HomePlanet', 'CryoSleep', 'Destination', 'VIP', 'Transported']","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:02:33.195295Z","iopub.execute_input":"2024-05-20T13:02:33.195702Z","iopub.status.idle":"2024-05-20T13:02:33.204267Z","shell.execute_reply.started":"2024-05-20T13:02:33.195665Z","shell.execute_reply":"2024-05-20T13:02:33.203214Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# distributions of numeric data \n\ndef num_dist(object, object_name):\n    # function for plotting most important distributions \n    fig, ax = plt.subplots(1,3, figsize=(20, 5))\n    \n    sns.boxplot(object, orient='h', ax=ax[0])\n    ax[0].set_title(f'Boxplot of {object_name} variable')\n    \n    ax[1].hist(object, bins=15, density=True)\n    ax[1].set_title(f'Distribution of {object_name} variable')\n    \n    sns.kdeplot(object, fill=True, ax=ax[2])\n    ax[2].set_title(f'Continuous distribution of {object_name} variable')\n    \n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:02:33.208271Z","iopub.execute_input":"2024-05-20T13:02:33.208983Z","iopub.status.idle":"2024-05-20T13:02:33.218423Z","shell.execute_reply.started":"2024-05-20T13:02:33.208943Z","shell.execute_reply":"2024-05-20T13:02:33.216984Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Test of the num_dist function \nnum_dist(train_data['Age'], 'Age')","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:02:33.220071Z","iopub.execute_input":"2024-05-20T13:02:33.220747Z","iopub.status.idle":"2024-05-20T13:02:34.024846Z","shell.execute_reply.started":"2024-05-20T13:02:33.22071Z","shell.execute_reply":"2024-05-20T13:02:34.023692Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# plots for all numerical data \nfor element in numCol:\n    num_dist(train_data[element], element)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:02:34.026129Z","iopub.execute_input":"2024-05-20T13:02:34.026819Z","iopub.status.idle":"2024-05-20T13:02:38.226289Z","shell.execute_reply.started":"2024-05-20T13:02:34.026781Z","shell.execute_reply":"2024-05-20T13:02:38.225114Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We can see that:\n- there are mostly young people in the spaceship \n- variables representing additional services are spiked at almost 0 with serious outliers ","metadata":{}},{"cell_type":"code","source":"# amout of outliers for each numerical variable \n\ndef IQR(data): \n    # function for calculating IQR \n    q1 = data.quantile(0.25)\n    q3 = data.quantile(0.75)\n    iqr = q3 - q1\n    mask = (data > (q3 + 1.5*iqr)) | (data < (q1 - 1.5*iqr))\n    return mask ","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:02:38.22768Z","iopub.execute_input":"2024-05-20T13:02:38.228063Z","iopub.status.idle":"2024-05-20T13:02:38.234577Z","shell.execute_reply.started":"2024-05-20T13:02:38.228028Z","shell.execute_reply":"2024-05-20T13:02:38.2336Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x = []\ny = []\nfor column in numCol:\n    x.append(column)\n    y.append(train_data[~IQR(train_data[column])].shape[0]/train_data.shape[0])\n\nplt.figure(figsize=(15,5))\nplt.title('Percentage of regular values (not outliers)')\nplt.xticks(rotation=45) \nplt.bar(x,y)\nplt.show() ","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:02:38.236064Z","iopub.execute_input":"2024-05-20T13:02:38.236385Z","iopub.status.idle":"2024-05-20T13:02:38.472895Z","shell.execute_reply.started":"2024-05-20T13:02:38.236352Z","shell.execute_reply":"2024-05-20T13:02:38.471729Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We can see, that we have a lot of outliers for services variables. There is high probability that they are correlated (we will see it later). It is possible, because when rich people buy one thing, they probablu buy other too. ","metadata":{}},{"cell_type":"code","source":"# total amount of outliers \n['Age', 'RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']\nmask = ~((IQR(train_data['Age']))|(IQR(train_data['RoomService']))|(IQR(train_data['FoodCourt']))|(IQR(train_data['ShoppingMall']))|(IQR(train_data['Spa']))|(IQR(train_data['VRDeck'])))\nnp.round(train_data[mask].shape[0]/train_data.shape[0], 2) ","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:02:38.47418Z","iopub.execute_input":"2024-05-20T13:02:38.474506Z","iopub.status.idle":"2024-05-20T13:02:38.499214Z","shell.execute_reply.started":"2024-05-20T13:02:38.474465Z","shell.execute_reply":"2024-05-20T13:02:38.497814Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We can see that if we remove all outliers we would have only 42% of the date. This is too big removement. We have to deal with outliers in other way. ","metadata":{}},{"cell_type":"code","source":"# Barplots for categorical data \n\nplt.figure(figsize=(15, 12))\ni = 0\nfor col in catCol: \n    plt.subplot(2,3,i+1)\n    i = i + 1 \n    train_data[col].value_counts().plot(kind='bar')\n    \nplt.show() ","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:02:38.500466Z","iopub.execute_input":"2024-05-20T13:02:38.500791Z","iopub.status.idle":"2024-05-20T13:02:39.183719Z","shell.execute_reply.started":"2024-05-20T13:02:38.500763Z","shell.execute_reply":"2024-05-20T13:02:39.182732Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 3. Data transformations \n\nBefore further analysis, let's transform data a bit. ","metadata":{}},{"cell_type":"code","source":"# let's look on data again \ntrain_data.head() ","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:02:39.185192Z","iopub.execute_input":"2024-05-20T13:02:39.185589Z","iopub.status.idle":"2024-05-20T13:02:39.206677Z","shell.execute_reply.started":"2024-05-20T13:02:39.185554Z","shell.execute_reply":"2024-05-20T13:02:39.205449Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# first, let's remove unnecessary columns \n\ntrain_data.drop(columns='Name', inplace=True)\ntrain_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:02:39.208372Z","iopub.execute_input":"2024-05-20T13:02:39.208815Z","iopub.status.idle":"2024-05-20T13:02:39.234509Z","shell.execute_reply.started":"2024-05-20T13:02:39.208775Z","shell.execute_reply":"2024-05-20T13:02:39.233388Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# when it comes to Cabin variable we can see that this feature has some probably usefull information \n# according to information about dataset Cabin variable has format: deck/num/side. While num is probably irrelevant, deck and side can provide additional information for the model \n\n# creating new columns from Cabin variable \ncabinNew = train_data['Cabin'].apply(lambda x: x.split('/') if type(x) != float else 'NaN')","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:24:35.176192Z","iopub.execute_input":"2024-05-20T13:24:35.176606Z","iopub.status.idle":"2024-05-20T13:24:35.188772Z","shell.execute_reply.started":"2024-05-20T13:24:35.176572Z","shell.execute_reply":"2024-05-20T13:24:35.187496Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# checking the results \ncabinNew","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:24:37.58235Z","iopub.execute_input":"2024-05-20T13:24:37.582727Z","iopub.status.idle":"2024-05-20T13:24:37.594141Z","shell.execute_reply.started":"2024-05-20T13:24:37.582697Z","shell.execute_reply":"2024-05-20T13:24:37.593305Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# slightly changing the creation of new colums \ncabinNew = train_data['Cabin'].apply(lambda x: x.split('/') if type(x) != float else [np.nan, np.nan, np.nan])\n\n# np.nan are for NaN values in the Cabin column ","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:35:44.73323Z","iopub.execute_input":"2024-05-20T13:35:44.733623Z","iopub.status.idle":"2024-05-20T13:35:44.744796Z","shell.execute_reply.started":"2024-05-20T13:35:44.733593Z","shell.execute_reply":"2024-05-20T13:35:44.743979Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# checkimg again \ncabinNew","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:35:46.454584Z","iopub.execute_input":"2024-05-20T13:35:46.45494Z","iopub.status.idle":"2024-05-20T13:35:46.464662Z","shell.execute_reply.started":"2024-05-20T13:35:46.454904Z","shell.execute_reply":"2024-05-20T13:35:46.463368Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# creating dataframe out of cabinNew\ncabinNew = pd.DataFrame(cabinNew.to_list())","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:35:48.894074Z","iopub.execute_input":"2024-05-20T13:35:48.894414Z","iopub.status.idle":"2024-05-20T13:35:48.902363Z","shell.execute_reply.started":"2024-05-20T13:35:48.894388Z","shell.execute_reply":"2024-05-20T13:35:48.901083Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cabinNew.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:35:51.090514Z","iopub.execute_input":"2024-05-20T13:35:51.090912Z","iopub.status.idle":"2024-05-20T13:35:51.101403Z","shell.execute_reply.started":"2024-05-20T13:35:51.090881Z","shell.execute_reply":"2024-05-20T13:35:51.100561Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# updating dataframe \ntrain_data['Deck'] = cabinNew.iloc[::,0]","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:35:53.757299Z","iopub.execute_input":"2024-05-20T13:35:53.757671Z","iopub.status.idle":"2024-05-20T13:35:53.763407Z","shell.execute_reply.started":"2024-05-20T13:35:53.757635Z","shell.execute_reply":"2024-05-20T13:35:53.762082Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# checking the results \ntrain_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:35:56.090316Z","iopub.execute_input":"2024-05-20T13:35:56.091013Z","iopub.status.idle":"2024-05-20T13:35:56.114084Z","shell.execute_reply.started":"2024-05-20T13:35:56.090969Z","shell.execute_reply":"2024-05-20T13:35:56.112973Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# everything seems to work. Let's add Side variable \ntrain_data['Side'] = cabinNew.iloc[::,2]","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:35:58.318427Z","iopub.execute_input":"2024-05-20T13:35:58.318795Z","iopub.status.idle":"2024-05-20T13:35:58.324316Z","shell.execute_reply.started":"2024-05-20T13:35:58.318769Z","shell.execute_reply":"2024-05-20T13:35:58.32308Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:36:00.146257Z","iopub.execute_input":"2024-05-20T13:36:00.146715Z","iopub.status.idle":"2024-05-20T13:36:00.17411Z","shell.execute_reply.started":"2024-05-20T13:36:00.146677Z","shell.execute_reply":"2024-05-20T13:36:00.172751Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:36:02.510697Z","iopub.execute_input":"2024-05-20T13:36:02.511054Z","iopub.status.idle":"2024-05-20T13:36:02.527507Z","shell.execute_reply.started":"2024-05-20T13:36:02.511018Z","shell.execute_reply":"2024-05-20T13:36:02.526444Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Let's see the distributions \nfig, ax = plt.subplots(1,2,figsize=(20, 5))\ntrain_data['Deck'].value_counts().plot(kind='bar', ax=ax[0])\ntrain_data['Side'].value_counts().plot(kind='bar', ax=ax[1])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:43:04.777319Z","iopub.execute_input":"2024-05-20T13:43:04.778413Z","iopub.status.idle":"2024-05-20T13:43:05.123773Z","shell.execute_reply.started":"2024-05-20T13:43:04.778378Z","shell.execute_reply":"2024-05-20T13:43:05.122517Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We can see that there is not many 'T' Deck values and that Side variable is relatively equally distributed. ","metadata":{}},{"cell_type":"code","source":"# Removing Cabin variable \ntrain_data.drop(columns='Cabin', inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:45:55.336152Z","iopub.execute_input":"2024-05-20T13:45:55.336529Z","iopub.status.idle":"2024-05-20T13:45:55.344546Z","shell.execute_reply.started":"2024-05-20T13:45:55.336493Z","shell.execute_reply":"2024-05-20T13:45:55.343234Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T13:46:04.157643Z","iopub.execute_input":"2024-05-20T13:46:04.158012Z","iopub.status.idle":"2024-05-20T13:46:04.178574Z","shell.execute_reply.started":"2024-05-20T13:46:04.157985Z","shell.execute_reply":"2024-05-20T13:46:04.177126Z"},"trusted":true},"execution_count":null,"outputs":[]}]}